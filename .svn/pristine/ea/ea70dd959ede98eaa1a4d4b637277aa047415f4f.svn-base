<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Sep 13 15:01:49 EEST 2018
  Author:  user
  Type: BPEL 2.0 Process
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="GetProfitInfoBPELProcess"
         targetNamespace="http://xmlns.oracle.com/CRE/GetProfitInfo/GetProfitInfoBPELProcess"
         xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:client="http://xmlns.oracle.com/CRE/GetProfitInfo/GetProfitInfoBPELProcess"
         xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:ui="http://xmlns.oracle.com/soa/designer"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/db/CRE/GetProfitInfo/ReadProfitInfoDb"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xmlns.fact.com/ws/BI"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/db/sp/ReadProfitInfoDb"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ess="http://xmlns.oracle.com/scheduler" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/db/CRE/GetProfitInfo/deleteProfitDbReference"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/db/sp/deleteProfitDbReference"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/db/CRE/GetProfitInfo/insertProfitInfoDbReference"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/db/sp/insertProfitInfoDbReference">
    <import ui:processWSDL="true"
            namespace="http://xmlns.oracle.com/CRE/GetProfitInfo/GetProfitInfoBPELProcess"
            location="../WSDLs/GetProfitInfoBPELProcess.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="getprofitinfobpelprocess_client" partnerLinkType="client:GetProfitInfoBPELProcess"
                     myRole="GetProfitInfoBPELProcessProvider"/>
        <partnerLink name="ReadProfitInfoDb" partnerLinkType="ns1:ReadProfitInfoDb_plt"
                     partnerRole="ReadProfitInfoDb_role"/>
        <partnerLink name="deleteProfitDbReference" partnerLinkType="ns4:deleteProfitDbReference_plt"
                     partnerRole="deleteProfitDbReference_role"/>
        <partnerLink name="insertProfitInfoDbReference" partnerLinkType="ns6:insertProfitInfoDbReference_plt"
                     partnerRole="insertProfitInfoDbReference_role"/>
    </partnerLinks>
    <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:GetProfitInfoBPELProcessRequestMessage"/>
        <!-- Reference to the message that will be returned to the requester-->
        <variable name="outputVariable" messageType="client:GetProfitInfoBPELProcessResponseMessage"/>
        <variable name="BusinessKey" type="xsd:string"/>
        <variable name="CompositeName" type="xsd:string"/>
        <variable name="InstanceID" type="xsd:string"/>
        <variable name="SourceExecutionID" type="xsd:string"/>
        <variable name="SourceAppUserName" type="xsd:string"/>
        <variable name="ExecutionInput" type="xsd:string"/>
        <variable name="ExecutionStatus" type="xsd:string"/>
        <variable name="SourceAppCode" type="xsd:string"/>
        <variable name="FaultStr" type="xsd:string"/>
        <variable name="FaultCode" type="xsd:string"/>
        <variable name="ExecutionOutput" type="xsd:string"/>
        <variable name="ErrorBusCode" type="xsd:string"/>
        <variable name="ErrorBusMessage" type="xsd:string"/>
        <variable name="ErrorTechCode" type="xsd:string"/>
        <variable name="ErrorTechMessage" type="xsd:string"/>
        <variable name="ErrorTechDetails" type="xsd:string"/>
        <variable name="TechSystemOperation" type="xsd:string"/>
        <variable name="TechSystem" type="xsd:string"/>
        <variable name="ClientIPAddress" type="xsd:string"/>
        <variable name="ExecutionID" type="xsd:string"/>
        <variable name="Invoke1_ReadProfitInfoDb_InputVariable" messageType="ns1:args_in_msg"/>
        <variable name="Invoke1_ReadProfitInfoDb_OutputVariable" messageType="ns1:args_out_msg"/>
        <variable name="InvokeDeleteProfit_deleteProfitDbReference_InputVariable" messageType="ns4:args_in_msg"/>
        <variable name="nodesCountVar" type="xsd:string"/>
    </variables>
    <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in GetProfitInfoBPELProcess.wsdl) -->
        <receive name="receiveInput" partnerLink="getprofitinfobpelprocess_client"
                 portType="client:GetProfitInfoBPELProcess" operation="process" variable="inputVariable"
                 createInstance="yes"/>
        <assign name="Assign_DefaultVariables">
            <copy>
                <from>$inputVariable.payload/ns2:MessageHeader/ns2:ApplicationCode</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$SourceAppCode</to>
            </copy>
            <copy>
                <from>$inputVariable.payload/ns2:MessageHeader/ns2:TransactionID</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$SourceExecutionID</to>
            </copy>
            <copy>
                <from>$inputVariable.payload/ns2:MessageHeader/ns2:ApplicationUserName</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$SourceAppUserName</to>
            </copy>
            <copy>
                <from>$inputVariable.payload/ns2:MessageHeader/ns2:TransactionID</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageHeader/ns2:TransactionID</to>
            </copy>
            <copy>
                <from>'getProfileInfo'</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$CompositeName</to>
            </copy>
            <copy>
                <from>ora:getFlowId()</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InstanceID</to>
            </copy>
            <copy>
                <from>ora:toCDATA($inputVariable.payload)</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$ExecutionInput</to>
            </copy>
            <copy>
                <from>'S'</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$ExecutionStatus</to>
            </copy>
            <copy>
                <from>'Success'</from>
                <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:StatusInformation/ns2:Status</to>
            </copy>
        </assign>
        <extensionActivity>
            <bpelx:exec name="JavaValidation">
                <![CDATA[try {       
                     java.net.InetAddress ipAddress = java.net       
                                                          .InetAddress       
                                                          .getLocalHost();       
                     String clientIp = (ipAddress.getHostAddress()).trim();       
                
                     String compositeName = (String) getVariableData("CompositeName");       
                     String transactionID =       
                         ((org.w3c.dom.Element) getVariableData("inputVariable", "payload", "//ns2:TransactionID"))       
                         .getTextContent();       
                     String applicationCode =       
                         ((org.w3c.dom.Element) getVariableData("inputVariable", "payload", "//ns2:ApplicationCode"))       
                         .getTextContent();       
                     String applicationUserName =       
                         ((org.w3c.dom.Element) getVariableData("inputVariable", "payload", "//ns2:ApplicationUserName"))       
                         .getTextContent();       
                     String cardID =       
                         ((org.w3c.dom.Element) getVariableData("inputVariable", "payload", "//ns2:P_CARD_ID"))       
                         .getTextContent();       
                     String pFlgUpd =       
                         ((org.w3c.dom.Element) getVariableData("inputVariable", "payload", "//ns2:P_FLG_UPD"))       
                         .getTextContent();       
                            
                     String MandatoryField = null;       
                
                     if (transactionID.equals("")) {       
                         MandatoryField = "TransactionID";       
                     } else if (applicationCode.equals("")) {       
                         MandatoryField = "ApplicationCode";       
                     } else if (applicationUserName.equals("")) {       
                         MandatoryField = "ApplicationUserName";       
                     } else if (cardID.equals("")) {       
                         MandatoryField = "P_CARD_ID";       
                     } else if (pFlgUpd.equals("")) {       
                         MandatoryField = "P_FLG_UPD";       
                     }       
                
                     if (MandatoryField != null) {       
                         setVariableData("ExecutionStatus", "F");       
                         setVariableData("outputVariable", "payload", "//ns1:Status", "Failed");       
                         setVariableData("ErrorBusCode", "VF0001");       
                         setVariableData("ErrorBusMessage",       
                                         "Validation Fault : Unable to FulFill Transaction, Entry [ " + MandatoryField +       
                                         " ] is Mandatory.");       
                         setVariableData("ErrorTechCode", "OFM-VAL-0001");       
                         setVariableData("ErrorTechMessage", "Entry [ " + MandatoryField + " ] is Mandatory.");       
                     } else {       
                         com.dimensions.mw.utils.validationManagement.ValidationManager validationManager =       
                             new com.dimensions.mw.utils.validationManagement.ValidationManager();       
                         String validationCheck =       
                             validationManager.ApplyValidation(applicationCode, compositeName, "isAllowedSource",       
                                                               compositeName + "###" + applicationCode + "###" + clientIp +       
                                                               "###" + "token" + "###" + applicationUserName);       
                      if (validationCheck == null) {                    
                     String attributesCheck = validationManager.ApplyValidation(applicationCode, compositeName, "validateAttributes",       
                                                                                         "P_CARD_ID:String" + ":" + cardID + "###" +       
                                                                                          "P_FLG_UPD:String"+":"+ pFlgUpd );       
                           
                              if(attributesCheck != null){                    
                              setVariableData("ExecutionStatus", "F");                    
                              setVariableData("outputVariable", "payload", "//ns2:Status","Failed");                    
                              setVariableData("ErrorBusCode",attributesCheck.split("#")[0]);                    
                              setVariableData("ErrorBusMessage",attributesCheck.split("#")[1].split("##")[0]);                    
                              setVariableData("ErrorTechCode",attributesCheck.split("##")[1].split("###")[0]);                    
                              setVariableData("ErrorTechMessage",attributesCheck.split("###")[1].split("###-")[0]);                    
                              setVariableData("ErrorTechDetails", attributesCheck.split("###-")[1].split("#####")[0]);                    
                              }      
                                                           } else {       
                                                               setVariableData("ExecutionStatus", "F");       
                                                               setVariableData("outputVariable", "payload", "//ns2:Status", "Failed");       
                                                               setVariableData("ErrorBusCode", validationCheck.split("#")[0]);       
                                                               setVariableData("ErrorBusMessage", validationCheck.split("#")[1].split("##")[0]);       
                                                               setVariableData("ErrorTechCode", validationCheck.split("##")[1].split("###")[0]);       
                                                               setVariableData("ErrorTechMessage", validationCheck.split("###")[1].split("###-")[0]);       
                                                               setVariableData("ErrorTechDetails", validationCheck.split("###-")[1].split("#####")[0]);       
                                                           }       
                                                       }       
                                                          
                
                 } catch (Exception exc) {       
                     addAuditTrailEntry(exc);       
                     exc.printStackTrace();       
                 }]]>
            </bpelx:exec>
        </extensionActivity>
        <!-- Generate reply to synchronous request -->
        <if name="IfValidInput">
            <documentation>
                <![CDATA[Yes]]>
            </documentation>
            <condition>$ExecutionStatus = 'S'</condition>
            <sequence>
                <scope name="ReadScope">
                    <faultHandlers>
                        <catchAll><sequence name="Sequence8"><assign name="AssignDeleteError"
                                                                     xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      <copy>
         <from>ora:getFaultAsString()</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$FaultStr</to>
      </copy>
      <copy>
         <from>ora:getFaultName()</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$FaultCode</to>
      </copy>
      <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes"
            xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <from>'Failed'</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:StatusInformation/ns2:Status</to>
      </copy>
      <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes"
            xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <from>''</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorBusCode</to>
      </copy>
      <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes"
            xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <from>''</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorBusMessage</to>
      </copy>
      <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes"
            xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <from>''</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechCode</to>
      </copy>
      <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes"
            xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <from>''</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechMessage</to>
      </copy>
      <copy bpelx:insertMissingToData="yes" ignoreMissingFromData="yes"
            xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <from>''</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechDetails</to>
      </copy>
      <copy>
         <from>'F'</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$ExecutionStatus</to>
      </copy>
   </assign><extensionActivity xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      <bpelx:exec name="Java_ManageError" xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <![CDATA[try {                            
                            String faultStr = (String)getVariableData("FaultStr");                            
                            String faultCode = (String)getVariableData("FaultCode");                            
                            String techSystemOperation = (String)getVariableData("TechSystemOperation");                            
                            String techSystem = (String)getVariableData("TechSystem");                    
                            String compositeName = (String)getVariableData("CompositeName");                
                                            
                            com.dimensions.mw.utils.errorManagement.inMemoryData.ErrorDefinitionBean errorDefinitionBean =                            
                                new com.dimensions.mw.utils.errorManagement.inMemoryData.ErrorDefinitionBean();                            
                                            
                            com.dimensions.mw.utils.errorManagement.ErrorManager errorManager = new com.dimensions.mw.utils.errorManagement.ErrorManager();                            
                                            
                            errorDefinitionBean = errorManager.getErrorInformation(faultCode+" "+faultStr,techSystem,techSystemOperation,compositeName);                             
                                    
                            setVariableData("outputVariable", "payload", "//ns2:ErrorBusCode",errorDefinitionBean.getErrorBussinessCode() );                     
                            setVariableData("outputVariable", "payload", "//ns2:ErrorBusMessage", errorDefinitionBean.getErrorBussinessMessage());                     
                            setVariableData("outputVariable", "payload", "//ns2:ErrorTechCode",errorDefinitionBean.getErrorTechCode());                     
                            setVariableData("outputVariable", "payload", "//ns2:ErrorTechMessage",errorDefinitionBean.getErrorTechMessage());                 
                            setVariableData("outputVariable", "payload", "//ns2:ErrorTechDetails",techSystem+" | "+techSystemOperation+" | "+ errorDefinitionBean.getErrorTechDetails());           
                               
                                           
                    } catch (Exception exc) {       
                        addAuditTrailEntry(exc);    
                    }]]>
      </bpelx:exec>
   </extensionActivity></sequence></catchAll>
                    </faultHandlers>
                    <sequence name="Sequence7"><assign name="Assign_RemoveEmptyTag"
                                                                  xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                            <extensionAssignOperation>
                                <bpelx:remove xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
                                    <bpelx:target expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation</bpelx:target>
                                </bpelx:remove>
                            </extensionAssignOperation>
                        </assign><extensionActivity xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      <bpelx:exec name="Java_DBLog" xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
                                <![CDATA[try {       
            String weblogicDomainName = "Unknown";       
            String serverName = "Unknown";       
            javax.naming.InitialContext ctx = null;       
            ctx = new javax.naming.InitialContext();       
            javax.management.MBeanServer beanServer =       
                (javax.management.MBeanServer) ctx.lookup("java:comp/env/jmx/runtime");       
            javax.management.ObjectName runtimeService =       
                new javax.management.ObjectName("com.bea:Name=RuntimeService,Type=weblogic.management.mbeanservers.runtime.RuntimeServiceMBean");       
            javax.management.ObjectName domainCFG =       
                (javax.management.ObjectName) beanServer.getAttribute(runtimeService, "DomainConfiguration");       
            weblogicDomainName = (String) beanServer.getAttribute(domainCFG, "Name");       
            javax.management.ObjectName serverCFG =       
                (javax.management.ObjectName) beanServer.getAttribute(runtimeService, "ServerConfiguration");       
            serverName = (String) beanServer.getAttribute(serverCFG, "Name");       
       
            String executionID = com.dimensions.mw.utils.compositeManagement.CompositeManager.getUniqueId();       
            setVariableData("ExecutionID", executionID);       
            String compositeName = (String) getVariableData("CompositeName");       
            String sourceAppCode = (String) getVariableData("SourceAppCode");       
            String sourceExecutionID = (String) getVariableData("SourceExecutionID");       
            String sourceAppUserName = (String) getVariableData("SourceAppUserName");       
            String executionInput = (String) getVariableData("ExecutionInput");       
            String instanceID = (String) getVariableData("InstanceID");       
            String bussinessKey = (String) getVariableData("BusinessKey");       
       
            com.dimensions.mw.utils.loggerManagement.LoggerManager       
               .insertProcessInstance(compositeName, executionID, sourceAppCode, sourceExecutionID, sourceAppUserName,       
                                      executionInput, instanceID, weblogicDomainName, serverName, bussinessKey);       
        } catch (Exception exc) {       
 addAuditTrailEntry(exc);      
                    exc.printStackTrace();     
        }]]>
                            </bpelx:exec>
   </extensionActivity><sequence name="Sequence1"><assign name="AssignCardId">
                                <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                    <from>$inputVariable.payload/ns2:MessageBody/ns2:InfoInformation/ns2:PCARD_ID</from>
                                    <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$Invoke1_ReadProfitInfoDb_InputVariable.InputParameters/ns3:PCARD_ID</to>
                                </copy>
                            </assign><invoke name="InvokeReadProfit"
                                                                                                                                                                                                                                                                                                                                      partnerLink="ReadProfitInfoDb"
                                                                                                                                                                                                                                                                                                                                      portType="ns1:ReadProfitInfoDb_ptt"
                                                                                                                                                                                                                                                                                                                                      operation="ReadProfitInfoDb"
                                                                                                                                                                                                                                                                                                                                      inputVariable="Invoke1_ReadProfitInfoDb_InputVariable"
                                                                                                                                                                                                                                                                                                                                      outputVariable="Invoke1_ReadProfitInfoDb_OutputVariable"
                                                                                                                                                                                                                                                                                                                                      bpelx:invokeAsDetail="no"/><assign name="AssignNumOfOutputs">
                                <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                    <from>ora:countNodes($Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row)</from>
                                    <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$nodesCountVar</to>
                                </copy>
                            </assign><if name="IfReadSuccessfully"><documentation><![CDATA[Yes]]></documentation><condition>$outputVariable.payload/ns2:MessageBody/ns2:StatusInformation/ns2:Status = 'Success'</condition><sequence name="Sequence2"><scope name="DeleteScope"><sequence name="Sequence3"><assign name="AssignDeleteParameter"><copy><from>number($inputVariable.payload/ns2:MessageBody/ns2:InfoInformation/ns2:PCARD_ID)</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeDeleteProfit_deleteProfitDbReference_InputVariable.InputParameters/ns5:PCARD_ID</to></copy></assign><invoke name="InvokeDeleteProfit"
                                                                                                                                                                                                                                                                                                                                                                                                                                                            partnerLink="deleteProfitDbReference"
                                                                                                                                                                                                                                                                                                                                                                                                                                                            portType="ns4:deleteProfitDbReference_ptt"
                                                                                                                                                                                                                                                                                                                                                                                                                                                            operation="deleteProfitDbReference"
                                                                                                                                                                                                                                                                                                                                                                                                                                                            inputVariable="InvokeDeleteProfit_deleteProfitDbReference_InputVariable"
                                                                                                                                                                                                                                                                                                                                                                                                                                                            bpelx:invokeAsDetail="no"/></sequence></scope><forEach parallel="no"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   counterName="Index"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   name="ForEachProfitRow"><startCounterValue>1</startCounterValue><finalCounterValue>ora:countNodes($Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row)</finalCounterValue>
                                        <scope name="Scope1">
                                            <variables>
                                                <variable name="InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable"
                                                          messageType="ns6:args_in_msg"/>
                                            </variables>
                                            <sequence>
                                                <assign name="AssignInsertInput">
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:CARD_ID</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PCARD_ID</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:CENTER_CODE</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PCENTER_CODE</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:SETUP_YEAR</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PSETUP_YEAR</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:SERIAL_ID</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PSERIAL_ID</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:CASH_COMM_PROFIT</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PCASH_COMM_PROFIT</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:DIST_DATE</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PDIST_DATE</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:DIST_CASH_PERCENT</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PDIST_CASH_PERCENT</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:ACCOUNT_SHARE</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PACCOUNT_SHARE</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:P_RECORDSET/ns3:P_RECORDSET_Row[$Index]/ns3:COMPANY_SHARES</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PCOMPANY_SHARES</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$Invoke1_ReadProfitInfoDb_OutputVariable.OutputParameters/ns3:PGET</from>
                                                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable.InputParameters/ns7:PGET</to>
                                                    </copy>
                                                </assign>
                                                <invoke name="InvokeInsertProfitInfo"
                                                        partnerLink="insertProfitInfoDbReference"
                                                        portType="ns6:insertProfitInfoDbReference_ptt"
                                                        operation="insertProfitInfoDbReference"
                                                        inputVariable="InvokeInsertProfitInfo_insertProfitInfoDbReference_InputVariable"
                                                        bpelx:invokeAsDetail="no"/>
                                            </sequence>
                                        </scope>
                                    </forEach><assign name="AssignReadResult"><copy><from>'Success'</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:StatusInformation/ns2:Status</to></copy></assign></sequence><else><documentation><![CDATA[No]]></documentation><sequence name="Sequence4"><assign name="AssignReadError"><copy><from>$ErrorBusCode</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorBusCode</to></copy><copy><from>$ErrorBusMessage</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorBusMessage</to></copy><copy><from>$ErrorTechCode</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechCode</to></copy><copy><from>$ErrorTechMessage</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechMessage</to></copy><copy><from>$ErrorTechDetails</from><to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechDetails</to></copy></assign><extensionActivity><bpelx:exec name="Java_ManageError"><![CDATA[try {                            
                            String faultStr = (String)getVariableData("FaultStr");                            
                            String faultCode = (String)getVariableData("FaultCode");                            
                            String techSystemOperation = (String)getVariableData("TechSystemOperation");                            
                            String techSystem = (String)getVariableData("TechSystem");                    
                            String compositeName = (String)getVariableData("CompositeName");                
                                            
                            com.dimensions.mw.utils.errorManagement.inMemoryData.ErrorDefinitionBean errorDefinitionBean =                            
                                new com.dimensions.mw.utils.errorManagement.inMemoryData.ErrorDefinitionBean();                            
                                            
                            com.dimensions.mw.utils.errorManagement.ErrorManager errorManager = new com.dimensions.mw.utils.errorManagement.ErrorManager();                            
                                            
                            errorDefinitionBean = errorManager.getErrorInformation(faultCode+" "+faultStr,techSystem,techSystemOperation,compositeName);                             
                                    
                            setVariableData("outputVariable", "payload", "//ns2:ErrorBusCode",errorDefinitionBean.getErrorBussinessCode() );                     
                            setVariableData("outputVariable", "payload", "//ns2:ErrorBusMessage", errorDefinitionBean.getErrorBussinessMessage());                     
                            setVariableData("outputVariable", "payload", "//ns2:ErrorTechCode",errorDefinitionBean.getErrorTechCode());                     
                            setVariableData("outputVariable", "payload", "//ns2:ErrorTechMessage",errorDefinitionBean.getErrorTechMessage());                 
                            setVariableData("outputVariable", "payload", "//ns2:ErrorTechDetails",techSystem+" | "+techSystemOperation+" | "+ errorDefinitionBean.getErrorTechDetails());           
                               
                                           
                    } catch (Exception exc) {       
                        addAuditTrailEntry(exc);    
                    }]]></bpelx:exec></extensionActivity></sequence></else></if></sequence></sequence></scope><assign name="Assign_FinalOutput"
                                                                                                                      xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      
   <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
         <from>ora:toCDATA($outputVariable.payload)</from>
         <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$ExecutionOutput</to>
      </copy></assign><extensionActivity xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                    <bpelx:exec name="Java_FinalDBLog" xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
                        <![CDATA[try {      
            String executionID = (String) getVariableData("ExecutionID");      
            String executionStatus = (String) getVariableData("ExecutionStatus");      
            String sourceExecutionID = (String) getVariableData("SourceExecutionID");      
            String executionOutput = (String) getVariableData("ExecutionOutput");      
            String compositeName = (String) getVariableData("CompositeName");      
      
            com.dimensions.mw.utils.loggerManagement.LoggerManager      
               .updateProcessInstance(executionID, executionOutput, executionStatus, compositeName);      
        } catch (Exception exc) {      
            addAuditTrailEntry(exc);     
                    exc.printStackTrace();    
        }]]>
                    </bpelx:exec>
                </extensionActivity>
            </sequence>
            <else>
                <documentation>
                    <![CDATA[No]]>
                </documentation>
                <assign name="AssignValidationError">
                    <copy>
                        <from>$ErrorBusCode</from>
                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorBusCode</to>
                    </copy>
                    <copy>
                        <from>$ErrorBusMessage</from>
                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorBusMessage</to>
                    </copy>
                    <copy>
                        <from>$ErrorTechCode</from>
                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechCode</to>
                    </copy>
                    <copy>
                        <from>$ErrorTechMessage</from>
                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechMessage</to>
                    </copy>
                    <copy>
                        <from>$ErrorTechDetails</from>
                        <to expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">$outputVariable.payload/ns2:MessageBody/ns2:ErrorInformation/ns2:ErrorTechDetails</to>
                    </copy>
                </assign>
            </else>
        </if>
        <reply name="replyOutput" partnerLink="getprofitinfobpelprocess_client"
               portType="client:GetProfitInfoBPELProcess" operation="process" variable="outputVariable"/>
    </sequence>
</process>